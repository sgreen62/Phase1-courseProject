package courseproject;

import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.Scanner;

public class BankAcctApp {

    private static String readString(Scanner in, String prompt, int maxLen) {
        while (true) {
            try {
                System.out.print(prompt);
                String v = in.nextLine().trim();
                if (v.isEmpty() || v.length() > maxLen) throw new IllegalArgumentException("length 1-" + maxLen);
                return v;
            } catch (Exception e) { System.out.println("invalid: " + e.getMessage()); }
        }
    }

    private static String readDigits(Scanner in, String prompt, int len) {
        while (true) {
            try {
                System.out.print(prompt);
                String v = in.nextLine().trim();
                if (v.length() != len || !v.matches("\\d+")) throw new IllegalArgumentException("must be " + len + " digits");
                return v;
            } catch (Exception e) { System.out.println("invalid: " + e.getMessage()); }
        }
    }

    private static LocalDate readDate(Scanner in, String prompt) {
        while (true) {
            try {
                System.out.print(prompt + " (yyyy-MM-dd): ");
                String v = in.nextLine().trim();
                return LocalDate.parse(v);
            } catch (DateTimeParseException e) {
                System.out.println("invalid: enter date like 2025-09-03");
            }
        }
    }

    private static String readType(Scanner in, String prompt) {
        while (true) {
            try {
                System.out.print(prompt + " (DEP or WTH): ");
                String v = in.nextLine().trim().toUpperCase();
                if (!v.equals("DEP") && !v.equals("WTH")) throw new IllegalArgumentException("DEP or WTH");
                return v;
            } catch (Exception e) { System.out.println("invalid: " + e.getMessage()); }
        }
    }

    private static double readAmount(Scanner in, String prompt) {
        while (true) {
            try {
                System.out.print(prompt + " (> 0): ");
                double v = Double.parseDouble(in.nextLine().trim());
                if (v <= 0) throw new IllegalArgumentException("must be > 0");
                return v;
            } catch (NumberFormatException e) {
                System.out.println("invalid number");
            } catch (Exception e) {
                System.out.println("invalid: " + e.getMessage());
            }
        }
    }

    private static void printHeader() {
        System.out.println("\nID\tAcct#\tType\tDate\t\tTxType\tAmount\tFee/Note\tBalance");
    }

    private static void printLine(String id, Account acct, LocalDate d, String txType, double amt, String note) {
        System.out.printf("%s\t%s\t%s\t%s\t%s\t%.2f\t%s\t%.2f%n",
                id,
                acct.getAccountNumber(),
                acct.getAccountType(),
                d == null ? "-" : d.toString(),
                txType == null ? "-" : txType,
                amt,
                note == null ? "-" : note,
                acct.balance());
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        // ----- create Customer 1 (checking) -----
        Customer c1 = new Customer();
        c1.setCustomerID(readString(in, "Customer1 ID (max 5): ", 5));
        c1.setSSN(readDigits(in, "SSN (9 digits): ", 9));
        c1.setLastName(readString(in, "Last Name (max 20): ", 20));
        c1.setFirstName(readString(in, "First Name (max 15): ", 15));
        c1.setStreet(readString(in, "Street (max 20): ", 20));
        c1.setCity(readString(in, "City (max 20): ", 20));
        c1.setState(readString(in, "State (2 letters): ", 2).toUpperCase());
        c1.setZip(readDigits(in, "Zip (5 digits): ", 5));
        c1.setPhone(readDigits(in, "Phone (10 digits): ", 10));

        CheckingAccount chk = new CheckingAccount();
        chk.setAccountNumber(readString(in, "Checking Acct# (max 5): ", 5));
        // start balance is zero by design

        // ----- create Customer 2 (savings) -----
        System.out.println();
        Customer c2 = new Customer();
        c2.setCustomerID(readString(in, "Customer2 ID (max 5): ", 5));
        c2.setSSN(readDigits(in, "SSN (9 digits): ", 9));
        c2.setLastName(readString(in, "Last Name (max 20): ", 20));
        c2.setFirstName(readString(in, "First Name (max 15): ", 15));
        c2.setStreet(readString(in, "Street (max 20): ", 20));
        c2.setCity(readString(in, "City (max 20): ", 20));
        c2.setState(readString(in, "State (2 letters): ", 2).toUpperCase());
        c2.setZip(readDigits(in, "Zip (5 digits): ", 5));
        c2.setPhone(readDigits(in, "Phone (10 digits): ", 10));

        SavingsAccount sav = new SavingsAccount();
        sav.setAccountNumber(readString(in, "Savings Acct# (max 5): ", 5));

        // ----- scenario steps -----
        printHeader();

        // 1) Deposit $1000 into checking
        LocalDate d1 = readDate(in, "Date for checking deposit 1000");
        chk.setTransaction(d1, "DEP", 1000);
        chk.deposit();
        printLine(c1.getCustomerID(), chk, d1, "DEP", 1000, "fee 0.50");

        // 2) Withdraw $500 from checking
        LocalDate d2 = readDate(in, "Date for checking withdraw 500");
        chk.setTransaction(d2, "WTH", 500);
        chk.withdrawal();
        printLine(c1.getCustomerID(), chk, d2, "WTH", 500, "fee 0.50 or +30 if overdraft");

        // 3) Withdraw $501 from checking
        LocalDate d3 = readDate(in, "Date for checking withdraw 501");
        chk.setTransaction(d3, "WTH", 501);
        chk.withdrawal();
        printLine(c1.getCustomerID(), chk, d3, "WTH", 501, "fee 0.50 (+30 if <0)");

        // 4) Deposit $500 into checking
        LocalDate d4 = readDate(in, "Date for checking deposit 500");
        chk.setTransaction(d4, "DEP", 500);
        chk.deposit();
        printLine(c1.getCustomerID(), chk, d4, "DEP", 500, "fee 0.50");

        // 5) Add interest to checking (2%)
        chk.applyInterest();
        printLine(c1.getCustomerID(), chk, null, "INT", 0, "add 2%");

        // 6) Deposit $1000 into savings
        LocalDate d6 = readDate(in, "Date for savings deposit 1000");
        sav.setTransaction(d6, "DEP", 1000);
        sav.deposit();
        printLine(c2.getCustomerID(), sav, d6, "DEP", 1000, "fee 0.25");

        // 7) Withdraw $500 from savings
        LocalDate d7 = readDate(in, "Date for savings withdraw 500");
        sav.setTransaction(d7, "WTH", 500);
        sav.withdrawal();
        printLine(c2.getCustomerID(), sav, d7, "WTH", 500, "fee 0.25 or denied");

        // 8) Withdraw $501 from savings
        LocalDate d8 = readDate(in, "Date for savings withdraw 501");
        sav.setTransaction(d8, "WTH", 501);
        sav.withdrawal();
        printLine(c2.getCustomerID(), sav, d8, "WTH", 501, "fee 0.25 or denied");

        // 9) Deposit $500 into savings
        LocalDate d9 = readDate(in, "Date for savings deposit 500");
        sav.setTransaction(d9, "DEP", 500);
        sav.deposit();
        printLine(c2.getCustomerID(), sav, d9, "DEP", 500, "fee 0.25");

        // 10) Add interest to savings (5%)
        sav.applyInterest();
        printLine(c2.getCustomerID(), sav, null, "INT", 0, "add 5%");

        in.close();
    }
}
